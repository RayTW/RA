package ra.db;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.math.BigDecimal;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.HashMap;
import org.junit.Test;

/** Test class. */
public class MockResultSetTest {

  @Test
  public void testAllMethod() throws SQLException, FileNotFoundException {
    MockResultSet resultSet = new MockResultSet();

    resultSet.afterLast();
    resultSet.beforeFirst();
    resultSet.cancelRowUpdates();
    resultSet.clearWarnings();
    resultSet.deleteRow();
    resultSet.afterLast();
    resultSet.afterLast();
    resultSet.insertRow();
    resultSet.moveToCurrentRow();
    resultSet.moveToInsertRow();
    resultSet.refreshRow();
    resultSet.setFetchDirection(0);
    resultSet.setFetchSize(0);
    Array array = null;
    resultSet.updateArray(0, array);
    resultSet.updateArray("columnLabel", array);
    FileInputStream fi = null;
    resultSet.updateAsciiStream(0, fi);
    resultSet.updateAsciiStream("columnLabel", fi);
    resultSet.updateAsciiStream(0, fi, 0);
    resultSet.updateAsciiStream("columnLabel", fi, 0);
    resultSet.updateAsciiStream(0, fi, 0L);
    resultSet.updateAsciiStream("columnLabel", fi, 0L);
    resultSet.updateBigDecimal(0, BigDecimal.ONE);
    resultSet.updateBigDecimal("columnLabel", BigDecimal.ONE);
    resultSet.updateBinaryStream(0, fi);
    resultSet.updateBinaryStream("columnLabel", fi);
    resultSet.updateBinaryStream(0, fi, 0);
    resultSet.updateBinaryStream("columnLabel", fi, 0);
    resultSet.updateBinaryStream(0, fi, 0L);
    resultSet.updateBinaryStream("columnLabel", fi, 0L);
    resultSet.updateBlob(0, fi);
    Blob blob = null;
    resultSet.updateBlob("columnLabel", blob);
    resultSet.updateBlob(0, blob);
    resultSet.updateBlob("columnLabel", fi);
    resultSet.updateBlob(0, fi, 0L);
    resultSet.updateBlob("columnLabel", fi, 0L);
    resultSet.updateBoolean(0, false);
    resultSet.updateBoolean("columnLabel", false);
    resultSet.updateByte(0, (byte) 0x0);
    resultSet.updateByte("columnLabel", (byte) 0x0);
    resultSet.updateBytes(0, new byte[] {0x0});
    resultSet.updateBytes("columnLabel", new byte[] {0x0});
    Reader reader = null;
    resultSet.updateCharacterStream(0, reader);
    resultSet.updateCharacterStream("columnLabel", reader);
    resultSet.updateCharacterStream(0, reader, 0);
    resultSet.updateCharacterStream("columnLabel", reader, 0);
    resultSet.updateCharacterStream(0, reader, 0L);
    resultSet.updateCharacterStream("columnLabel", reader, 0L);
    Clob clob = null;
    resultSet.updateClob(0, clob);
    resultSet.updateClob("columnLabel", clob);
    resultSet.updateClob(0, reader);
    resultSet.updateClob("columnLabel", reader);
    resultSet.updateClob(0, reader, 0);
    resultSet.updateClob("columnLabel", reader, 0);
    resultSet.updateClob(0, reader, 0L);
    resultSet.updateClob("columnLabel", reader, 0L);
    Date date = null;
    resultSet.updateDate(0, date);
    resultSet.updateDate("columnLabel", date);
    resultSet.updateDouble(0, 0.0);
    resultSet.updateDouble("columnLabel", 0.0);
    resultSet.updateFloat(0, 0.0f);
    resultSet.updateFloat("columnLabel", 0.0f);
    resultSet.updateInt(0, 0);
    resultSet.updateInt("columnLabel", 0);
    resultSet.updateLong(0, 0L);
    resultSet.updateLong("columnLabel", 0L);
    resultSet.updateNCharacterStream(0, reader);
    resultSet.updateNCharacterStream("columnLabel", reader);
    resultSet.updateNCharacterStream(0, reader, 0L);
    resultSet.updateNCharacterStream("columnLabel", reader, 0L);
    NClob nclob = null;
    resultSet.updateNClob(0, nclob);
    resultSet.updateNClob("columnLabel", nclob);
    resultSet.updateNClob(0, reader);
    resultSet.updateNClob("columnLabel", reader);
    resultSet.updateNClob(0, reader, 0L);
    resultSet.updateNClob("columnLabel", reader, 0L);
    resultSet.updateNString(0, "");
    resultSet.updateNString("columnLabel", "");
    resultSet.updateNull(0);
    resultSet.updateNull("columnLabel");
    resultSet.updateObject(0, new Object());
    resultSet.updateObject("columnLabel", new Object());
    resultSet.updateObject(0, new Object(), 0);
    resultSet.updateObject("columnLabel", new Object(), 0);
    resultSet.updateRow();
    Ref ref = null;
    resultSet.updateRef(0, ref);
    resultSet.updateRef("columnLabel", ref);
    RowId rowid = null;
    resultSet.updateRowId(0, rowid);
    resultSet.updateRowId("columnLabel", rowid);
    SQLXML xmlObject = null;
    resultSet.updateSQLXML(0, xmlObject);
    resultSet.updateSQLXML("columnLabel", xmlObject);
    short shortValue = 0;
    resultSet.updateShort(0, shortValue);
    resultSet.updateShort("columnLabel", shortValue);
    resultSet.updateString(0, "");
    resultSet.updateString("columnLabel", "");
    Time time = null;
    resultSet.updateTime(0, time);
    resultSet.updateTime("columnLabel", time);
    Timestamp timestamp = null;
    resultSet.updateTimestamp(0, timestamp);
    resultSet.updateTimestamp("columnLabel", timestamp);
    resultSet.wasNull();

    assertFalse(resultSet.isWrapperFor(Object.class));
    assertNull(resultSet.unwrap(Object.class));
    assertFalse(resultSet.absolute(Integer.MIN_VALUE));
    assertEquals(0, resultSet.findColumn("label"));
    assertFalse(resultSet.first());
    assertNull(resultSet.getArray(0));
    assertNull(resultSet.getArray("label"));
    assertNull(resultSet.getAsciiStream(0));
    assertNull(resultSet.getAsciiStream("columnLabel"));
    assertNull(resultSet.getBigDecimal(0));
    assertNull(resultSet.getBigDecimal(0, 0));
    assertNull(resultSet.getBigDecimal("columnLabel", 0));
    assertNull(resultSet.getBinaryStream(0));
    assertNull(resultSet.getBinaryStream("columnLabel"));
    assertNull(resultSet.getBlob(0));
    assertNull(resultSet.getBlob("columnLabel"));
    assertEquals(false, resultSet.getBoolean(0));
    assertEquals(false, resultSet.getBoolean("columnLabel"));
    assertEquals(0, resultSet.getByte(0));
    assertEquals(0, resultSet.getByte("columnLabel"));
    assertNull(resultSet.getBytes(0));
    assertNull(resultSet.getBytes("columnLabel"));
    assertNull(resultSet.getCharacterStream(0));
    assertNull(resultSet.getCharacterStream("columnLabel"));
    assertNull(resultSet.getClob(0));
    assertNull(resultSet.getClob("columnLabel"));
    assertEquals(0, resultSet.getConcurrency());
    assertNull(resultSet.getCursorName());
    assertNull(resultSet.getDate(0));
    assertNull(resultSet.getDate("columnLabel"));
    assertNull(resultSet.getDate(0, Calendar.getInstance()));
    assertNull(resultSet.getDate("columnLabel", Calendar.getInstance()));
    assertEquals(0.0, resultSet.getDouble(0), 1);
    assertEquals(0.0, resultSet.getDouble("columnLabel"), 1);
    assertEquals(0.0, resultSet.getFloat(0), 1);
    assertEquals(0.0, resultSet.getFloat("columnLabel"), 1);
    assertEquals(0, resultSet.getFetchDirection());
    assertEquals(0, resultSet.getFetchSize());
    assertEquals(0, resultSet.getHoldability());
    assertEquals(0, resultSet.getInt(0));
    assertEquals(0, resultSet.getInt("columnLabel"));
    assertEquals(0, resultSet.getLong(0));
    assertEquals(0, resultSet.getLong("columnLabel"));
    assertNull(resultSet.getMetaData());
    assertNull(resultSet.getNCharacterStream(0));
    assertNull(resultSet.getNCharacterStream("columnLabel"));
    assertNull(resultSet.getNClob(0));
    assertNull(resultSet.getNClob("columnLabel"));
    assertNull(resultSet.getNString(0));
    assertNull(resultSet.getNString("columnLabel"));
    assertNull(resultSet.getObject(0));
    assertNull(resultSet.getObject("columnLabel"));
    assertNull(resultSet.getObject(0));
    assertNull(resultSet.getObject("columnLabel"));
    assertNull(resultSet.getObject(0, new HashMap<String, Class<?>>()));
    assertNull(resultSet.getObject("columnLabel", new HashMap<String, Class<?>>()));
    assertNull(resultSet.getObject(0, String.class));
    assertNull(resultSet.getObject("columnLabel", String.class));
    assertNull(resultSet.getRef(0));
    assertNull(resultSet.getRef("columnLabel"));
    assertEquals(0, resultSet.getRow());
    assertNull(resultSet.getRowId(0));
    assertNull(resultSet.getRowId("columnLabel"));
    assertNull(resultSet.getSQLXML(0));
    assertNull(resultSet.getSQLXML("columnLabel"));
    assertEquals(0, resultSet.getShort(0));
    assertEquals(0, resultSet.getShort("columnLabel"));
    assertNull(resultSet.getStatement());
    assertNull(resultSet.getString(0));
    assertNull(resultSet.getString("columnLabel"));
    assertNull(resultSet.getString(0));
    assertNull(resultSet.getString("columnLabel"));
    assertNull(resultSet.getTime(0));
    assertNull(resultSet.getTime("columnLabel"));
    assertNull(resultSet.getTime(0, Calendar.getInstance()));
    assertNull(resultSet.getTime("columnLabel", Calendar.getInstance()));
    assertNull(resultSet.getTimestamp(0));
    assertNull(resultSet.getTimestamp("columnLabel"));
    assertNull(resultSet.getTimestamp(0, Calendar.getInstance()));
    assertNull(resultSet.getTimestamp("columnLabel", Calendar.getInstance()));
    assertEquals(0, resultSet.getType());
    assertNull(resultSet.getURL(0));
    assertNull(resultSet.getURL("columnLabel"));
    assertNull(resultSet.getUnicodeStream("columnLabel"));
    assertNull(resultSet.getWarnings());
    assertFalse(resultSet.isAfterLast());
    assertFalse(resultSet.isBeforeFirst());
    assertFalse(resultSet.isClosed());
    assertFalse(resultSet.isFirst());
    assertFalse(resultSet.isLast());
    assertFalse(resultSet.last());
    assertFalse(resultSet.next());
    assertFalse(resultSet.previous());
    assertFalse(resultSet.relative(0));
    assertFalse(resultSet.rowDeleted());
    assertFalse(resultSet.rowInserted());
    assertFalse(resultSet.rowUpdated());
    assertFalse(resultSet.previous());

    resultSet.close();
  }
}
