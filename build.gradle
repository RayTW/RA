plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
}

repositories {
    jcenter()
}

sourceCompatibility = "8"
targetCompatibility = "8"

group = "io.github.raytw"
archivesBaseName = "ra"
version = "0.6.0"

//-SNAPSHOT

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'ra'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'ra'
                description = 'The library provides mysql (CRUD), socket server, logging.'
                url = 'https://github.com/RayTW/RA'
                properties = [
                    myProp: "value",
                    "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://raw.githubusercontent.com/RayTW/RA/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'RayTW'
                        name = 'Ray Li'
                        email = 'ray00000sina@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:RayTW/RA.git'
                    developerConnection = 'scm:git:ssh://github.com/RayTW/RA.git'
                    url = 'https://github.com/RayTW/RA'
                }
            }
        }
    }
    repositories {
        maven {
          credentials {
            username findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
          }
          
          if(project.version.endsWith('-SNAPSHOT')) {
            url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
          } else {
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
          }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.json/json
  implementation group: 'org.json', name: 'json', version: '20220924'

  implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.30'

  // https://mvnrepository.com/artifact/com.h2database/h2
  testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'
  
  // https://mvnrepository.com/artifact/org.xerial.snappy/snappy-java
  implementation group: 'org.xerial.snappy', name: 'snappy-java', version: '1.1.8.4'
  testImplementation 'com.google.cloud:google-cloud-bigquery:2.16.1'

  // Use JUnit test framework
  testImplementation 'junit:junit:4.12'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

